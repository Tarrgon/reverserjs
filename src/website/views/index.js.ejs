<script>
  function setupSubmissionsChart() {
    let canvas = document.getElementById('submissions-chart')
    let ctx = canvas.getContext("2d")
    let total = <%- submissionData.deletedPosts + submissionData.notUploaded + submissionData.uploaded %>
    let other = total - <%- submissionData.deletedPosts + submissionData.notUploaded + submissionData.exactMatch + submissionData.probableReplacement %>

    <% const colors = [
      "#75cd34",
      "#4d24c2",
      "#60e633",
      "#cf37ea",
      "#53cb5a",
      "#743dde",
      "#c6cd28",
      "#925cec",
      "#88b940",
      "#6a32a5",
      "#eab426",
      "#7172e7",
      "#f04514",
      "#6284e1",
      "#e67c20",
      "#5848a0",
      "#b8b549",
      "#c855d3",
      "#61ce87",
      "#dd46b2",
      "#5e9b47",
      "#e03470",
      "#55bfa3",
      "#db2f21",
      "#4dc1ce",
      "#dd3640",
      "#599fd3",
      "#e05728",
      "#8684d2",
      "#d09d31",
      "#8f3381",
      "#c5b66b",
      "#c884d7",
      "#766d20",
      "#d14c89",
      "#609a6c",
      "#d04356",
      "#505c28",
      "#d188bd",
      "#c5883f",
      "#4f4c84",
      "#b2471c",
      "#aa99d0",
      "#e27455",
      "#83375f",
      "#bbae77",
      "#a64751",
      "#b87a61",
      "#d38195",
      "#994a2d"
    ] %>

    new Chart(ctx, {
      type: "doughnut",
      data: {
        datasets: [{
            data: [<%- submissionData.deletedPosts %>, <%- submissionData.notUploaded %>, <%- submissionData.uploaded %>],
            backgroundColor: ["#750000", "#cf3030", "#3c3"],
          },
          {
            data: [<%- submissionData.deletedPosts %>, <%- submissionData.notUploaded %>, <%- submissionData.exactMatch %>, <%- submissionData.probableReplacement %>, other],
            backgroundColor: ["#750000", "#cf3030", "#0f0", "#f28436", "#3cdaec"],
          },
          {
            data: [<%- Object.values(submissionData.countsPerSite).join(", ") %>],
            backgroundColor: ["<%- Object.values(submissionData.countsPerSite).map((a, i) => colors[i]).join('","') %>"],
          }
        ],

        labels: [
          "Deleted",
          "Not uploaded",
          "Uploaded",
          "Deleted",
          "Not uploaded",
          "Exact match",
          "Probable replacement",
          "Other",
          "<%- Object.keys(submissionData.countsPerSite).join('","') %>"
        ]
      },
      plugins: [{
        afterDraw: (chart) => {
          let ctx = chart.ctx
          ctx.font = "bold 20px Arial"
          ctx.textAlign = "center"
          ctx.textBaseline = "middle"
          ctx.fillStyle = "#ABB1BF"
          ctx.fillText(`${total} Submissions`, canvas.getBoundingClientRect().width / 2, chart.legend.bottom + chart.chartArea.height / 2)
        },
      }],
      options: {
        plugins: {
          legend: {
            labels: {
              generateLabels: (chart) => {
                let original = Chart.overrides.doughnut.plugins.legend.labels.generateLabels
                let labelsOriginal = original.call(this, chart)

                let datasetColors = chart.data.datasets.map((e) => {
                  return e.backgroundColor
                })

                datasetColors = datasetColors.flat()

                labelsOriginal.forEach(label => {
                  label.datasetIndex = (label.index - label.index % 2) / 2

                  label.hidden = false

                  label.fillStyle = datasetColors[label.index]
                })

                return labelsOriginal
              }
            },
            onClick: (mouseEvent, legendItem, legend) => {
              return false
            }
          },
          tooltip: {
            callbacks: {
              title: (context) => {
                let labelIndex = context[0].dataIndex
                for (let i = 0; i < context[0].datasetIndex; i++) {
                  labelIndex += context[0].chart.data.datasets[i].data.length
                }
                if (labelIndex > 4) return context[0].chart.data.labels[2]
                return context[0].chart.data.labels[labelIndex % 3]
              },

              label: (context) => {
                let labelIndex = context.dataIndex
                for (let i = 0; i < context.datasetIndex; i++) {
                  labelIndex += context.chart.data.datasets[i].data.length
                }
                return context.chart.data.labels[labelIndex] + ': ' + context.formattedValue
              }
            }
          },
          title: {
            display: true,
            text: "Submissions",
            color: "#ABB1BF",
            font: {
              weight: "bold",
              size: 24
            }
          }
        }
      }
    })
  }

  function setupE621IqdbChart() {
    let canvas = document.getElementById('e621iqdb-chart')
    let ctx = canvas.getContext("2d")

    let chart = new Chart(ctx, {
      type: "doughnut",
      data: {
        datasets: [{
          data: [<%- e621IqdbData.queueLength %>, <%- e621IqdbData.currentBatchLength %>],
          backgroundColor: ["#3c3", "#ecd13c"],
        }],

        labels: [
          "Queue Length",
          "Current batch length",
        ]
      },
      plugins: [{
        afterDraw: (chart) => {
          let ctx = chart.ctx
          ctx.font = "bold 20px Arial"
          ctx.textAlign = "center"
          ctx.textBaseline = "middle"
          ctx.fillStyle = "#ABB1BF"
          let rect = canvas.getBoundingClientRect()
          ctx.fillText(`${chart.data.datasets[0].data[0]} queued`, rect.width / 2, chart.legend.bottom + chart.chartArea.height / 2 - 10)
          ctx.fillText(`${chart.data.datasets[0].data[1]} processing`, rect.width / 2, chart.legend.bottom + chart.chartArea.height / 2 + 10)
        },
      }],
      options: {
        plugins: {
          title: {
            display: true,
            text: "E621 Iqdb Status",
            color: "#ABB1BF",
            font: {
              weight: "bold",
              size: 24
            }
          }
        }
      }
    })

    let eventSource = new EventSource("/stream")

    eventSource.addEventListener("iqdb-updates", (event) => {
      let newData = JSON.parse(event.data)

      chart.data.datasets[0].data = newData

      chart.update()
    })
  }

  setupSubmissionsChart()
  setupE621IqdbChart()
</script>